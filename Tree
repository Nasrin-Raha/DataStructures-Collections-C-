//Trees


using System;
using System.Collections.Generic;

class Trees{
    
    
    public static void Main(string[] args) {
        
        TreeNode<string> a = new TreeNode<string>("a");
        TreeNode<string> b = new TreeNode<string>("b");
        TreeNode<string> c = new TreeNode<string>("c");
        TreeNode<string> d = new TreeNode<string>("d");
        TreeNode<string> e = new TreeNode<string>("e");
        TreeNode<string> f = new TreeNode<string>("f");
        TreeNode<string> g = new TreeNode<string>("g");
        
        a.SetLeft(b);
        a.SetRight(c);
       //  b.SetLeft(d);
        //b.SetRight(e);
        //c.SetLeft(f);
        //c.SetRight(g);
        
       // Console.WriteLine(GetHieght(a));
        
        //PreOrder(a);
        
      // InOrder(a);
        PostOrder(a);
    }
    
    
    
    static bool IsBalanced(TreeNode<string> root){
        int diff = 0;
        
        if((root.GetLeft() != null && root.GetRight == null) || root.GetLeft == null && root.GetRight != null)
        {
            diff += 1;
        }
        else
        {
            diff = 0;
        }
        
        return IsBalanced(root.GetLeft()) && IsBalanced(root.GetRight());
        

        
    }
    
    static void PreOrder(TreeNode<string> root){
        if(root != null) {
            Console.WriteLine(root.GetValue().ToString() + " ");
            PreOrder(root.GetLeft());
            PreOrder(root.GetRight());
            
        }
    }
    
    static void PostOrder(TreeNode<string> root){
        if(root != null) {
            PostOrder(root.GetLeft());
            PostOrder(root.GetRight());
            Console.WriteLine(root.GetValue().ToString() + " ");
        }
    }
    
    static void InOrder(TreeNode<string> root) {
        if(root != null) {
            PreOrder(root.GetLeft());
            Console.WriteLine(root.GetValue().ToString() + " ");
            PreOrder(root.GetRight());
        }
        
    }
    
    static int GetHieght(TreeNode<string> root) {
        
        if(root == null) { return 0; }
        return Math.Max(GetHieght(root.GetLeft()), GetHieght(root.GetRight()) + 1);
        
        
        
    }
    
    
    
    
    
    
    
    
     class TreeNode<T>
     
     {
         T value;
         TreeNode<T> left = null;
         TreeNode<T> right = null;
         
         public TreeNode(T value){
             this.value = value;
         }
         
         public TreeNode<T> GetLeft(){
             return left;
         }
         
         public TreeNode<T> GetRight(){
             return right;
             
         }
         
         public T GetValue(){
             return value;
         }
         
         public void SetValue(T value){
             this.value = value;
             
         }
         
         public void SetRight(TreeNode<T> node){
             right = node;
         }
         
         public void SetLeft(TreeNode<T> node) {
             left = node;
             
         }
     }
    

}
