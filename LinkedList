//LinkedLists


using System;
using System.Collections.Generic;


public class LinkedList
{
    
    static LinkedList<string> linkedlist = new LinkedList<string>();
    
    public static void Main(string[] args){
          linkedlist.AddFirst("root");
          linkedlist.AddAfter(linkedlist.First, "element");
          linkedlist.AddBefore(linkedlist.First, "new root");
          linkedlist.AddLast("last element");
          
          Console.WriteLine(linkedlist.Count);
          Console.WriteLine(linkedlist.First);
          LinkedListNode<string> node= linkedlist.Find("root");
          linkedlist.Remove("root");
          linkedlist.Remove(Node);
          linkedlist.RemoveFirst();
          linkedlist.RemoveLast();
          linkedlist.Clear();
    
    }
    
    
    public class Node
    {
        public Node next;
        public object data;
        
    }
    
    private Node root;
    
    public Node First { get; { return root; } };
    
    public Node Last {
        get
        {
            Node currentNode = root;
            if(currentNode == null)
            {
                return null;
            }
            
            while(currentNode.next != null)
            {
                currentNode = currentNode.next;
            }
            
            return currentNode;
            
        }
    }
    
    
    public void Append(object value)
    {
        Node node = new Node { data = value};
        
        if(root == null) 
        {
            root = Node
        }
        else
        {
            Last.next = node;
        }
        
    }
    
    
    
    
    // delete method
    
    public void Delete(Node node)
    {
        if(root == node){
            root = node.next;
            node.next = null;
            
        }
        else
        {
            Node current = root;
            while(current.next != null){
                if(current.next == node)
                {
                    current.next = node.next;
                    node.next = null;
                    break;
                    
                }
                current = current.next;
            }
        }
    }
  
    
}
